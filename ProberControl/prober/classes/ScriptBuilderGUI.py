#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Dec 13, 2017 02:19:07 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import ScriptBuilder

def vp_start_gui(Maitre):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    ScriptBuilder.set_Tk_var()
    top = ScriptBuilderGUI(root, Maitre)
    ScriptBuilder.init(root, top, Maitre)
    root.mainloop()

w = None
def create_ScriptBuilder(w_new, Maitre, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w
    w = w_new
    ScriptBuilder.set_Tk_var()
    top = ScriptBuilderGUI (w, Maitre)
    ScriptBuilder.init(w, top, Maitre)
    return (w, top)

def destroy_ScriptBuilder():
    global w
    w.destroy()
    w = None


class ScriptBuilderGUI:
    def __init__(self, top=None, Maitre=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        self.Maitre = Maitre

        _bgcolor = '#000000'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1000x400+459+11")
        top.title("Script Builder")
        top.configure(background="#d9d9d9")

        #TEXTBOX
        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.55, rely=0.03, relheight=0.8
                , relwidth=0.43)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap=NONE)

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.file = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.file,
                label="File")
        self.file.add_command(
                command=ScriptBuilder.loadScript,
                label="Load Script")
        self.file.add_command(
                command=ScriptBuilder.saveScript,
                label="Save Script")
        self.file.add_command(
                command=ScriptBuilder.destroy_window,
                label="Exit")

        self.edit = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.edit,
                label="Edit")
        self.edit.add_command(
                command=ScriptBuilder.searchAndReplace,
                label="Search and Replace")

        self.AddMeasFrame = LabelFrame(top)
        self.AddMeasFrame.place(relx=0.03, rely=0.04, relheight=0.8
                , relwidth=0.5)
        self.AddMeasFrame.configure(relief=GROOVE)
        self.AddMeasFrame.configure(foreground="black")
        self.AddMeasFrame.configure(text='''Add Measurement''')
        self.AddMeasFrame.configure(background="#d9d9d9")
        self.AddMeasFrame.configure(width=590)

        self.MeasNameEntry = Entry(self.AddMeasFrame)
        self.MeasNameEntry.place(relx=0.02, rely=0.28, relheight=0.06
                , relwidth=0.72)
        self.MeasNameEntry.configure(background="white")
        self.MeasNameEntry.configure(disabledforeground="#a3a3a3")
        self.MeasNameEntry.configure(font="TkFixedFont")
        self.MeasNameEntry.configure(foreground="#000000")
        self.MeasNameEntry.configure(insertbackground="black")
        self.MeasNameEntry.configure(textvariable=ScriptBuilder.MeasNameVar)
        self.MeasNameEntry.configure(width=424)

        self.ProcBox = OptionMenu(self.AddMeasFrame,
        ScriptBuilder.ProcBoxVar,
        *self.Maitre.get_all_modules(),
        command = ScriptBuilder.ProcBoxChange
        )
        self.ProcBox.place(relx=0.02, rely=0.43, relheight=0.06, relwidth=0.72)
        self.ProcBox.configure(width=423)
        self.ProcBox.configure(takefocus="")

        self.StructEntry = Entry(self.AddMeasFrame)
        self.StructEntry.place(relx=0.02, rely=0.26, relheight=0.06
                , relwidth=0.72)
        self.StructEntry.configure(background="white")
        self.StructEntry.configure(disabledforeground="#a3a3a3")
        self.StructEntry.configure(font="TkFixedFont")
        self.StructEntry.configure(foreground="#000000")
        self.StructEntry.configure(insertbackground="black")
        self.StructEntry.configure(textvariable=ScriptBuilder.StructNameVar)
        self.StructEntry.configure(width=424)

        self.MeasNameLabel = Label(self.AddMeasFrame)
        self.MeasNameLabel.place(relx=0.02, rely=0.07, height=21, width=114)
        self.MeasNameLabel.configure(background="#d9d9d9")
        self.MeasNameLabel.configure(disabledforeground="#a3a3a3")
        self.MeasNameLabel.configure(foreground="#000000")
        self.MeasNameLabel.configure(text='''Measurement Name''')

        self.StructLabel = Label(self.AddMeasFrame)
        self.StructLabel.place(relx=0.02, rely=0.197, height=21, width=86)
        self.StructLabel.configure(background="#d9d9d9")
        self.StructLabel.configure(disabledforeground="#a3a3a3")
        self.StructLabel.configure(foreground="#000000")
        self.StructLabel.configure(text='''StructureName''')

        self.ProcLabel = Label(self.AddMeasFrame)
        self.ProcLabel.place(relx=0.02, rely=0.36, height=20, width=81)
        self.ProcLabel.configure(background="#d9d9d9")#d9d9d9
        self.ProcLabel.configure(disabledforeground="#a3a3a3")
        self.ProcLabel.configure(foreground="#000000")
        self.ProcLabel.configure(text='''Procedure File''')

        self.FuncLabel = Label(self.AddMeasFrame)
        self.FuncLabel.place(relx=0.02, rely=0.52, height=21, width=142)
        self.FuncLabel.configure(background="#d9d9d9")
        self.FuncLabel.configure(disabledforeground="#a3a3a3")
        self.FuncLabel.configure(foreground="#000000")
        self.FuncLabel.configure(text='''Function to be performed''')

        self.FuncBox = OptionMenu(self.AddMeasFrame,
        ScriptBuilder.FuncBoxVar,
        *self.Maitre.get_func_name(0),
        command = ScriptBuilder.FuncBoxChange
        )
        self.FuncBox.place(relx=0.02, rely=0.58, relheight=0.06, relwidth=0.72)
        self.FuncBox.configure(width=423)
        self.FuncBox.configure(takefocus="")

        self.ArgLabel = Label(self.AddMeasFrame)
        self.ArgLabel.place(relx=0.02, rely=0.64, height=21, width=65)
        self.ArgLabel.configure(background="#d9d9d9")
        self.ArgLabel.configure(disabledforeground="#a3a3a3")
        self.ArgLabel.configure(foreground="#000000")
        self.ArgLabel.configure(text='''Arguments''')

        self.ArgEntry = Entry(self.AddMeasFrame)
        self.ArgEntry.place(relx=0.02, rely=0.78, relheight=0.06, relwidth=0.72)
        self.ArgEntry.configure(background="white")
        self.ArgEntry.configure(disabledforeground="#a3a3a3")
        self.ArgEntry.configure(font="TkFixedFont")
        self.ArgEntry.configure(foreground="#000000")
        self.ArgEntry.configure(insertbackground="black")
        self.ArgEntry.configure(textvariable=ScriptBuilder.ArgEntryVar)
        self.ArgEntry.configure(width=424)

        self.ArgShowEntry = Entry(self.AddMeasFrame)
        self.ArgShowEntry.place(relx=0.02, rely=0.7, relheight=0.06
                , relwidth=0.72)
        self.ArgShowEntry.configure(background="white")
        self.ArgShowEntry.configure(disabledforeground="#a3a3a3")
        self.ArgShowEntry.configure(font="TkFixedFont")
        self.ArgShowEntry.configure(foreground="#000000")
        self.ArgShowEntry.configure(insertbackground="black")
        self.ArgShowEntry.configure(state=DISABLED)
        self.ArgShowEntry.configure(textvariable=ScriptBuilder.ArgShowEntryVar)
        self.ArgShowEntry.configure(width=424)
        
        self.AddMeasButton = Button(self.AddMeasFrame)
        self.AddMeasButton.place(relx=0.02, rely=0.87, height=24, width=147)
        self.AddMeasButton.configure(activebackground="#d9d9d9")
        self.AddMeasButton.configure(activeforeground="#000000")
        self.AddMeasButton.configure(background="#d9d9d9")
        self.AddMeasButton.configure(command=ScriptBuilder.addMeasurement)
        self.AddMeasButton.configure(disabledforeground="#a3a3a3")
        self.AddMeasButton.configure(foreground="#000000")
        self.AddMeasButton.configure(highlightbackground="#d9d9d9")
        self.AddMeasButton.configure(highlightcolor="black")
        self.AddMeasButton.configure(pady="0")
        self.AddMeasButton.configure(text='''AddMeasurement''')
        self.AddMeasButton.configure(width=147)




# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()

